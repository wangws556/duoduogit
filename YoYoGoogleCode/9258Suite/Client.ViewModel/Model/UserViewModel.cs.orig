using Snippets;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using YoYoStudio.Common.Wpf.ViewModel;
using YoYoStudio.Model;
using YoYoStudio.Model.Chat;
using YoYoStudio.Model.Core;
using YoYoStudio.Model.Json;

namespace YoYoStudio.Client.ViewModel
{
    [SnippetPropertyINPC(field = "micIndex", property = "MicIndex", type = "int", defaultValue = "-1")]
    [SnippetPropertyINPC(field = "micAction", property = "MicAction", type = "MicAction", defaultValue = "MicAction.None")]
    [SnippetPropertyINPC(field = "micStatus", property = "MicStatus", type = "int", defaultValue = "0")]
    [SnippetPropertyINPC(field = "micType", property = "MicType", type = "MicType", defaultValue = "MicType.None")]
    [SnippetPropertyINPC(field = "streamGuid", property = "StreamGuid", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "name", property = "Name", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "email", property = "Email", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "passwordQuestion", property = "PasswordQuestion", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "passwordAnswer", property = "PasswordAnswer", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "gender", property = "Gender", type = "bool", defaultValue = "false")]
    [SnippetPropertyINPC(field = "lastLoginTime", property = "LastLoginTime", type = "DateTime", defaultValue = "DateTime.Now")]
    [SnippetPropertyINPC(field = "nickName", property = "NickName", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "password", property = "Password", type = "string", defaultValue = "string.Empty")]
    [SnippetPropertyINPC(field = "money", property = "Money", type = "int", defaultValue = "0")]
    [SnippetPropertyINPC(field = "score", property = "Score", type = "int", defaultValue = "0")]
    [SnippetPropertyINPC(field = "age", property = "Age", type = "int", defaultValue = "0")]
    [SnippetPropertyINPC(field = "roleVM", property = "RoleVM", type = "RoleViewModel", defaultValue = "null")]
    [SnippetPropertyINPC(field = "roomVM", property = "RoomVM", type = "RoomViewModel", defaultValue = "null")]
    [SnippetPropertyINPC(field = "roomRoleVMs", property = "RoomRoleVMs", type = "ObservableCollection<RoomRoleViewModel>", defaultValue = "null")]
	public partial class UserViewModel : ImagedEntityViewModel
	{
        public UserApplicationInfo UserInfo { get; private set; }

		public UserViewModel(User usr):base(usr)
		{
            Name = usr.Name;
            NickName = usr.NickName;
            Email = usr.Email;
            PasswordQuestion = usr.PasswordQuestion;
            PasswordAnswer = usr.PasswordAnswer;
            Gender = usr.Gender.HasValue? usr.Gender.Value:false;
            LastLoginTime = usr.LastLoginTime.HasValue ? usr.LastLoginTime.Value : DateTime.Now;
            Age = usr.Age.HasValue?usr.Age.Value:0;
            Password = usr.Password;
        }

        public override void Initialize()
        {
            User usr = GetConcretEntity<User>();
            UserInfo = ApplicationVM.Cache.UserInfos.FirstOrDefault(i => i.User_Id == usr.Id &&
                (i.Application_Id == ApplicationVM.ApplicationId || i.Application_Id == BuiltIns.AllApplication.Id));
            if (UserInfo != null)
            {
                if (UserInfo.Money.HasValue)
                {
                    Money = UserInfo.Money.Value;
                }
                if (UserInfo.Score.HasValue)
                {
                    Score = UserInfo.Score.Value;
                }
                RoleVM = ApplicationVM.LocalCache.AllRoleVMs.FirstOrDefault(r => r.Id == UserInfo.Role_Id);
            }
            var rrs = ApplicationVM.LocalCache.AllRoomRoleVMs.Where(rr => rr.UserId == Id);
            if (rrs != null)
            {
                RoomRoleVMs = new System.Collections.ObjectModel.ObservableCollection<RoomRoleViewModel>(rrs);
            }
            base.Initialize();
        }

        public bool IsRoleInRoom(RoomViewModel room, Role role)
        {
            return RoomRoleVMs != null && RoomRoleVMs.FirstOrDefault(rr => rr.RoomId == room.Id && rr.RoleId == role.Id) != null;
        }
        public bool HasFrontendCommand(CommandViewModel cmdVM, RoomViewModel roomVM)
        {
            if (cmdVM.CommandType == BuiltIns.FrontendCommandType)
            {
                var targetRoleVM = ApplicationVM.LocalCache.AllRoleVMs.FirstOrDefault(r => r.Id == BuiltIns.AllRole.Id);
                return HasCommand(targetRoleVM, cmdVM, roomVM);
            }
            return false;
        }
        public bool HasUserCommand(UserViewModel targetUserVM, CommandViewModel cmdVM, RoomViewModel roomVM)
        {
            if (cmdVM.CommandType == BuiltIns.UserCommandType)
            {
                return HasCommand(targetUserVM.RoleVM, cmdVM, roomVM);
            }
            return false;
        }

        private bool HasCommand(RoleViewModel targetRoleVM, CommandViewModel cmdVM, RoomViewModel roomVM)
        {
            if (RoleVM != null && targetRoleVM != null)
            {
                var rcv = RoleVM.RoleCommandVMs.FirstOrDefault(rc => (rc.TargetRoleVM == targetRoleVM || rc.TargetRoleVM.Id == BuiltIns.AllRole.Id) && rc.CommandVM == cmdVM);
                if (rcv != null)
                {
                    if (rcv.IsManagerCommand)
                    {
                        return IsRoleInRoom(roomVM, BuiltIns._9258RoomAdministratorRole);
                    }
                    return true;
                }
            }
            return false;
        }

        public bool IsMe()
        {
            return this == ApplicationVM.LocalCache.CurrentUserVM;
        }

        public void OnMic(MicType micType, int micIndex, string streamGuid, int micStatus)
        {
            MicType = micType;
            MicIndex = micIndex;
            StreamGuid = streamGuid;
            MicAction = Model.Chat.MicAction.OnMic;
            MicStatus = micStatus;
        }

        public void Toggle(int micStatus)
        {
            MicAction = Model.Chat.MicAction.Toggle;
            MicStatus = micStatus;
        }

        public void DownMic()
        {
            MicType = Model.Chat.MicType.None;
            MicIndex = -1;
            StreamGuid = string.Empty;
            MicAction = Model.Chat.MicAction.None;
            MicStatus = MicStatusMessage.MicStatus_Off;
        }

        public override void Save()
        {
<<<<<<< .mine
            return new User()
            {
                Id = Id,
                NickName = NickName,
                Email = Email,
                PasswordAnswer = PasswordAnswer,
                PasswordQuestion = PasswordQuestion,
                Gender = Gender,
                LastLoginTime = LastLoginTime,
                Age = Age,
                Password = Password
            };
                       
=======
            User user = GetConcretEntity<User>();
            user.NickName = NickName;
            user.Email = Email;
            user.PasswordAnswer = PasswordAnswer;
            user.PasswordQuestion = PasswordQuestion;
            user.Gender = Gender;
            user.Age = Age;
            base.Save();
>>>>>>> .r1084
        }

        public override void Reset()
        {
            User user = GetConcretEntity<User>();
            NickName = user.NickName;
            Email = user.Email;
            PasswordAnswer = user.PasswordAnswer;
            PasswordQuestion = user.PasswordQuestion;
            Gender = user.Gender.HasValue ? user.Gender.Value : false;
            Age = user.Age.HasValue ? user.Age.Value : 0;
            base.Reset();
        }

        #region Json

		public ClientUserModel JsonData
		{
			get
			{
				return ToJson() as ClientUserModel;
			}
		}

        protected override object ToJson()
        {
			return new ClientUserModel(GetConcretEntity<User>(), UserInfo) { 
				RoleImageUrl = RoleVM.ImageVM.RelativePath,
				icon = ImageVM.RelativePath
			};
        }

        #endregion

    }
}
