using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Threading.Tasks;
using YoYoStudio.Common;
using YoYoStudio.Common.Wcf;
using YoYoStudio.DataService.Client;
using YoYoStudio.DataService.Client.Generated;
using YoYoStudio.Model;
using YoYoStudio.Model.Chat;
using YoYoStudio.Model.Core;

namespace YoYoStudio.ChatService.Library
{
	internal class UserNCallback
	{
		public User User { get; set; }
		public IChatServiceCallback Callback { get; set; }
        public string PublicIpAddress { get; set; }
        public string MacAddress { get; set; }
        public string DataServiceToken { get; set; }
	}

	[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single, InstanceContextMode = InstanceContextMode.PerSession, ConfigurationName = Const.ChatServiceName)]
	public partial class ChatService : WcfService, IChatService, IDisposable
	{
		#region Private Members

        private UserNCallback unc = null;

		bool CheckUser()
		{
			return !string.IsNullOrEmpty(serviceToken) && unc != null && unc.User != null;
		}

		void Channel_Faulted(object sender, EventArgs e)
		{
			LogOff();
			Dispose();
		}

		void Channel_Closing(object sender, EventArgs e)
		{
			LogOff();
		}
		#endregion

		#region IDisposable Implementation

		private bool disposed = false;

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		private void Dispose(bool disposing)
		{
			if (!disposed)
			{
				if (disposing)
				{

				}
			}
		}

		~ChatService()
		{
			Dispose(false);
		}

		#endregion

		#region Service Implementation

		[OperationBehavior]
		public User Login(int userId, string password, string macAddress)
		{
			string token = dataServiceClient.Login(userId, password);
			if (!string.IsNullOrEmpty(token))
			{
				OperationContext.Current.Channel.Faulted += Channel_Faulted;
				OperationContext.Current.Channel.Closing += Channel_Closing;
				User usr = dataServiceClient.GetUser(userId, token, userId);
                unc = new UserNCallback
				{
                    User = usr,
					Callback = OperationContext.Current.GetCallbackChannel<IChatServiceCallback>(),
					PublicIpAddress = GetClientRemoteEndPoint().Address,
					MacAddress = macAddress,
                    DataServiceToken = token
				};
				userCache.Add(userId,unc );
				Task.Factory.StartNew(() =>
				{
					foreach (var u in userCache)
					{
						if (u.Key != unc.User.Id)
						{
							u.Value.Callback.UserLoggedIn(unc.User);
						}
					}
				});
				return unc.User;
			}
			return null;
		}

		[OperationBehavior]
		public User Register(UserIdList userIdList,string account, string password, int gender)
		{
            return dataServiceClient.Register(userIdList, account, password, gender);
		}

        [OperationBehavior]
        public bool UpdateUser(User user)
        {
            if (unc.User.Id == user.Id)
            {
                unc.User = user;
                dataServiceClient.UpdateUser(unc.User.Id, unc.DataServiceToken, user);
            }
            return true;
        }

<<<<<<< .mine
        [OperationBehavior]
        public void UpdateUser(User user)
        {
            dataServiceClient.UpdateUser(user.Id, serviceToken, user);
        }

=======
        public bool UpdateUserHeaderImange(Image theImage)
        {
            dataServiceClient.UpdateImage(unc.User.Id, unc.DataServiceToken, theImage);
            return true;
        }

>>>>>>> .r1084
		[OperationBehavior]
		public int GetOnlineUserCount()
		{
			return userCache.Count;
		}
		[OperationBehavior]
		public void LogOff()
		{
			if (unc != null)
			{
				userCache.Remove(unc.User.Id);
				Task.Factory.StartNew(() =>
				{
					foreach (var u in userCache)
					{
						u.Value.Callback.UserLoggedOff(u.Key);
					}
				});
				unc = null;
				serviceToken = string.Empty;
			}
		}
		[OperationBehavior]
		public void KeepAlive()
		{
		}
		[OperationBehavior]
		public bool RoomLogin()
		{
			return true;
		}

		[OperationBehavior]
		public List<Model.Chat.RoomGroup> GetRoomGroups()
		{
			return cache.RoomGroups;
		}
		[OperationBehavior]
		public List<Model.Chat.Room> GetRooms()
		{
			return cache.Rooms;
		}
		[OperationBehavior]
		public List<Role> GetRoles()
		{
			return cache.Roles;
		}
		[OperationBehavior]
		public List<RoleCommandView> GetRoleCommands()
		{
			return cache.RoleCommands;
		}
		[OperationBehavior]
		public List<Model.Chat.GiftGroup> GetGiftGroups()
		{
			return cache.GiftGroups;
		}
		[OperationBehavior]
		public List<Model.Chat.Gift> GetGifts()
		{
			return cache.Gifts;
		}

		[OperationBehavior]
		public List<Command> GetCommands()
		{
			return cache.Commands;
		}

		[OperationBehavior]
		public List<ImageWithoutBody> GetImages(int start, int count)
		{
			return cache.Images.Skip(start-1).Take(count).ToList();
		}

		[OperationBehavior]
		public int GetImageCount()
		{
			return cache.Images == null ? 0 : cache.Images.Count;
		}

		public List<UserApplicationInfo> GetUserInfos(int start, int count)
		{
			return cache.UserInfos.Skip(start-1).Take(count).ToList();
		}

		public int GetUserInfoCount()
		{
			return cache.UserInfos == null ? 0 : cache.UserInfos.Count;
		}

		[OperationBehavior]
		public int GetRoomRoleCount()
		{
			return cache.RoomRoles == null ? 0 : cache.RoomRoles.Count;
		}
		[OperationBehavior]
		public List<RoomRole> GetRoomRoles(int start, int count)
		{
			return cache.RoomRoles.Skip(start-1).Take(count).ToList();
		}
        [OperationBehavior]
        public List<UserIdList> GetUserIds()
        {
            return cache.AvailableUserIds;
        }

		#endregion
	}

}
